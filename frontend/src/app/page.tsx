'use client';

import { useState } from 'react';
import { UserProfile, DebateSession } from '@/lib/types';

// Placeholder components - these will be generated by Magic MCP
const MagicCard = ({ children, className = '' }: { children: React.ReactNode; className?: string }) => (
  <div className={`bg-dark-card border border-dark-border rounded-lg p-6 ${className}`}>
    {children}
  </div>
);

const UserModal = ({ isOpen, onClose }: { isOpen: boolean; onClose: () => void }) => (
  isOpen ? (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
      <div className="bg-dark-card border border-dark-border rounded-lg p-6 max-w-md w-full mx-4">
        <h2 className="text-xl font-semibold mb-4">Add Profile</h2>
        <p className="text-gray-400 mb-4">Magic MCP will generate this modal component</p>
        <button 
          onClick={onClose}
          className="bg-accent-blue text-white px-4 py-2 rounded"
        >
          Close
        </button>
      </div>
    </div>
  ) : null
);

const PillNavbar = ({ onStart, canStart }: { onStart: () => void; canStart: boolean }) => (
  <div className="fixed bottom-6 left-1/2 transform -translate-x-1/2 z-40">
    <button
      onClick={onStart}
      disabled={!canStart}
      className={`px-8 py-3 rounded-full font-semibold transition-all ${
        canStart 
          ? 'bg-accent-blue hover:bg-blue-600 text-white shadow-lg hover:shadow-xl' 
          : 'bg-gray-600 text-gray-400 cursor-not-allowed'
      }`}
    >
      {canStart ? 'Start Debate' : 'Add 4 Profiles'}
    </button>
  </div>
);

export default function HomePage() {
  const [profiles, setProfiles] = useState<UserProfile[]>([]);
  const [session, setSession] = useState<DebateSession | null>(null);
  const [selectedCard, setSelectedCard] = useState<number | null>(null);
  const [isModalOpen, setIsModalOpen] = useState(false);

  const handleCardClick = (index: number) => {
    setSelectedCard(index);
    setIsModalOpen(true);
  };

  const handleModalClose = () => {
    setIsModalOpen(false);
    setSelectedCard(null);
  };

  const handleStartDebate = async () => {
    if (profiles.length === 4) {
      // TODO: Call API to start debate
      console.log('Starting debate with profiles:', profiles);
    }
  };

  const canStart = profiles.length === 4;

  return (
    <div className="min-h-screen bg-dark-bg text-white">
      {/* Header */}
      <div className="container mx-auto px-6 py-8">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-accent-blue to-accent-purple bg-clip-text text-transparent">
            Movie Debate Agent
          </h1>
          <p className="text-gray-400 text-lg">
            Four AI lawyers debate to find your perfect movie
          </p>
          <div className="mt-4 flex justify-center items-center gap-4 text-sm text-gray-500">
            <span className="flex items-center gap-2">
              <div className="w-2 h-2 bg-green-500 rounded-full"></div>
              Live MCP Stream
            </span>
            <span>•</span>
            <span>LangChain + FAISS</span>
            <span>•</span>
            <span>Magic MCP UI</span>
          </div>
        </div>

        {/* Main Grid - 2x2 layout for agent cards */}
        <div className="grid grid-cols-2 gap-6 max-w-4xl mx-auto mb-20">
          {Array.from({ length: 4 }, (_, index) => (
            <MagicCard 
              key={index}
              className="h-80 cursor-pointer hover:border-accent-blue/50 transition-colors relative"
            >
              <div 
                onClick={() => handleCardClick(index)}
                className="h-full flex flex-col items-center justify-center text-center"
              >
                {profiles[index] ? (
                  <>
                    {/* Profile exists */}
                    <div className="w-16 h-16 bg-gradient-to-br from-accent-blue to-accent-purple rounded-full mb-4 flex items-center justify-center text-2xl font-bold">
                      {profiles[index].name.charAt(0).toUpperCase()}
                    </div>
                    <h3 className="text-xl font-semibold mb-2">{profiles[index].name}</h3>
                    <p className="text-gray-400 text-sm mb-2">Age {profiles[index].age}</p>
                    <p className="text-gray-500 text-xs line-clamp-3">{profiles[index].vibe}</p>
                    
                    {/* Agent Stream Area - Placeholder */}
                    <div className="mt-4 w-full">
                      <div className="bg-dark-bg/50 rounded p-3 text-xs font-mono text-gray-500 h-20 overflow-hidden">
                        <div className="animate-pulse">Agent thoughts will stream here...</div>
                      </div>
                    </div>
                  </>
                ) : (
                  <>
                    {/* Empty slot */}
                    <div className="w-16 h-16 border-2 border-dashed border-gray-600 rounded-full mb-4 flex items-center justify-center">
                      <span className="text-2xl text-gray-600">+</span>
                    </div>
                    <h3 className="text-gray-400 text-lg">Add Profile</h3>
                    <p className="text-gray-600 text-sm">Click to add agent #{index + 1}</p>
                  </>
                )}
              </div>
              
              {/* Agent Color Indicator */}
              <div className={`absolute top-3 right-3 w-3 h-3 rounded-full ${
                index === 0 ? 'bg-agent-1' :
                index === 1 ? 'bg-agent-2' :
                index === 2 ? 'bg-agent-3' :
                'bg-agent-4'
              }`}></div>
            </MagicCard>
          ))}
        </div>

        {/* Status Area */}
        {session && (
          <div className="max-w-4xl mx-auto">
            <MagicCard className="text-center">
              <h3 className="text-lg font-semibold mb-2">Debate Status</h3>
              <p className="text-gray-400">Session: {session.id}</p>
              <p className="text-gray-400">Round: {session.current_round}/{session.max_rounds}</p>
              <p className="text-gray-400">Status: {session.status}</p>
            </MagicCard>
          </div>
        )}
      </div>

      {/* Modal */}
      <UserModal isOpen={isModalOpen} onClose={handleModalClose} />

      {/* Bottom Navigation */}
      <PillNavbar onStart={handleStartDebate} canStart={canStart} />
    </div>
  );
}
